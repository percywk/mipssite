***add***

Preface::The "add" instruction takes the values of the registers y and z and adds their total together before inserting in x.

Syntax::add x, y, z

Example::Let $t1 = 2, and $t2 = 4

Example::add $t0, $t1, $t2

Result::$t0 = 6, $t1 = 2, $t2 = 4

&&&4=mips/images/instructions/add.PNG
###add###

***addi***
Preface::The "addi" instruction takes the values of a single operand registers alongside a constant and inputs the addition of the two into the destination register.

Syntax::addi x, y, 100 

Example::Let $t1 = 2
Example::addi $t0, $t1, 100

Result::$t0 = 102, $t1 = 2

###addi###


***sub***
Preface::The 'sub' instruction takes two operand registers and performs subtraction placing the result into the destination register. 
Syntax::sub x, y, z



Example::Let $t1 = 2, $t2 = 4
Example::sub $t0, $t1, $t2

Result::$t0 = -2, $t1 = 2, $t2 = 4
###sub###

***lw***
Preface::The 'lw' instruction is a data transfer operation that moves data from the from an address in memory to a register. The first register is the destination register that takes the value, and the second register determines the starting address in memory. The constant determines the offset location from memory. Positive constants move down the inverted stack, while negative constants move upwards.

Syntax::lw $rd, 0($sp)

Example::Let $sp = 20,000 where the word at address 20,000 = 16
Example::lw $t0, 0($sp)

Result::$t0 = 16, $sp = 20,000

###lw###


***sw***
Preface::The 'sw' instruction is a data transfer operation that moves data from a register into memory. The first register is data to be transferred, and the second register determines the memory address. The constant determines the offset location from memory. Positive constants move down the inverted stack, while negative constants move upwards.

Syntax::sw $rd, 0($sp)

Example::Let $t0 = 16 and $sp = 20,000
Example::sw $t0, 0($sp)

Result::$t0 = 16, Word at $sp = 16

###sw###


***sll***
Preface::The 'sll' instruction is a special operation that shifts the individual bits of a register x times left. In shifting the register it inserts 0’s in the LSB and any bits that move further than the MSB are discarded. In the syntax provided above the register $t0 is shifted 4 times to the left effectively multiplying it by 16.

Syntax::sll $t0, $t0, 4

Example::Let $t0 = 2
Example::sll $t0, $t0, 2

Result::$t0 = 8

###sll###

***srl***
Preface::The 'srl' instruction is an operation that shifts the individual bits of a register x times right.
In shifting the register it inserts 0’s into the MSB and any bits that more further than the LSB are discarded.

Syntax::srl $t0, $t0, 4

Example::Let $t0 = 8
Example::srl $t0, $t0, 2

Result::$t0 = 2

###srl###